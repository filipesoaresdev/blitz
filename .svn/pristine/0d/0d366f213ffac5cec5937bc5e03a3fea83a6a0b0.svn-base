package br.gov.pi.detran.ouvidoria;

import br.gov.pi.detran.ouvidoria.dao.controleacesso.PermissaoDAO;
import br.gov.pi.detran.ouvidoria.modelo.controleacesso.Permissao;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.ejb.Stateless;

/**
 * Classe para geracao das permissoes iniciais do sistema
 *
 * @author Ayslan
 */
@Stateless
public class GeracaoPermissao {

    private static final Logger logger = Logger.getLogger(GeracaoPermissao.class.getName());
    @EJB
    private PermissaoDAO permissaoDAO;

    public void generate() {

        //Acionamento
        create(new Permissao("acionamento", "Acionamento", true), null);
        create(new Permissao("acionamento.list", "Pendentes", "/admin/view/acionamento/listAcionamento.jsf", true), "acionamento");
        create(new Permissao("acionamento.listAll", "Consulta", "/admin/view/acionamento/listAllAcionamento.jsf", true), "acionamento");
        create(new Permissao("acionamento.responder", "Responder", "/admin/view/acionamento/createAcionamento.jsf", false), "acionamento");
        create(new Permissao("acionamento.desconsiderar", "Desconsiderar"), "acionamento");
        create(new Permissao("acionamento.delete", "Exclusão do Acionamento"), "acionamento");
        
        create(new Permissao("tabelasBasicas", "Tabelas Básicas", true), null);
        //Cidade
        create(new Permissao("cidade", "Cidade", true), "tabelasBasicas");
        create(new Permissao("cidade.create", "Cadastro de Cidade", "/admin/view/cidade/createCidade.jsf", true), "cidade");
        create(new Permissao("cidade.list", "Consulta de Cidade", "/admin/view/cidade/listCidade.jsf", true), "cidade");
        create(new Permissao("cidade.audit", "Auditoria de Cidade"), "cidade");
        create(new Permissao("cidade.delete", "Exclusão de Cidade"), "cidade");

        //Escolaridade
        create(new Permissao("escolaridade", "Escolaridade", true), "tabelasBasicas");
        create(new Permissao("escolaridade.create", "Cadastro de Escolaridade", "/admin/view/escolaridade/createEscolaridade.jsf", true), "escolaridade");
        create(new Permissao("escolaridade.list", "Consulta de Escolaridade", "/admin/view/escolaridade/listEscolaridade.jsf", true), "escolaridade");
        create(new Permissao("escolaridade.audit", "Auditoria de Escolaridade"), "escolaridade");
        create(new Permissao("escolaridade.delete", "Exclusão de Escolaridade"), "escolaridade");

        //Estado
        create(new Permissao("estado", "Estado", true), "tabelasBasicas");
        create(new Permissao("estado.create", "Cadastro de Estado", "/admin/view/estado/createEstado.jsf", true), "estado");
        create(new Permissao("estado.list", "Consulta de Estado", "/admin/view/estado/listEstado.jsf", true), "estado");
        create(new Permissao("estado.audit", "Auditoria de Estado"), "estado");
        create(new Permissao("estado.delete", "Exclusão de Estado"), "estado");

        //Tipo Mensagem
        create(new Permissao("tipoMensagem", "Tipo de Mensagem", true), "tabelasBasicas");
        create(new Permissao("tipoMensagem.create", "Cadastro de Tipo Mensagem", "/admin/view/tipoMensagem/createTipoMensagem.jsf", true), "tipoMensagem");
        create(new Permissao("tipoMensagem.list", "Consulta de Tipo Mensagem", "/admin/view/tipoMensagem/listTipoMensagem.jsf", true), "tipoMensagem");
        create(new Permissao("tipoMensagem.audit", "Auditoria de Tipo Mensagem"), "tipoMensagem");
        create(new Permissao("tipoMensagem.delete", "Exclusão de Tipo Mensagem"), "tipoMensagem");



        /**
         * Administracao Sistema
         */
        create(new Permissao("administracaoSistema", "Sistema", true), null);

        //Parametro
        create(new Permissao("parametro", "Parâmetro", true), "administracaoSistema");
        create(new Permissao("parametro.create", "Cadastro de Parâmetro", "/admin/view/parametro/createParametro.jsf", true), "parametro");
        create(new Permissao("parametro.list", "Consulta de Parâmetro", "/admin/view/parametro/listParametro.jsf", true), "parametro");
        create(new Permissao("parametro.audit", "Auditoria de Parâmetro"), "parametro");
        create(new Permissao("parametro.delete", "Exclusão de Parâmetro"), "parametro");
        

        /*
         * Controle de Acesso
         */
        create(new Permissao("controleAcesso", "Controle de Acesso", true), "administracaoSistema");

        //Permissao
        create(new Permissao("permissao", "Permissão", true), "controleAcesso");
        create(new Permissao("permissao.create", "Cadastro de Permissão", "/admin/view/controleAcesso/permissao/createPermissao.jsf", true), "permissao");
        create(new Permissao("permissao.list", "Consulta de Permissão", "/admin/view/controleAcesso/permissao/listPermissao.jsf", true), "permissao");
        create(new Permissao("permissao.audit", "Auditoria de Permissão"), "permissao");
        create(new Permissao("permissao.delete", "Exclusão de Permissão"), "permissao");

        //Usuario
        create(new Permissao("usuario", "Usuário", true), "controleAcesso");
        create(new Permissao("usuario.create", "Cadastro de Usuário", "/admin/view/controleAcesso/usuario/createUsuario.jsf", true), "usuario");
        create(new Permissao("usuario.list", "Consulta de Usuário", "/admin/view/controleAcesso/usuario/listUsuario.jsf", true), "usuario");
        create(new Permissao("usuario.audit", "Auditoria de Usuário"), "usuario");
        create(new Permissao("usuario.delete", "Exclusão de Usuário"), "usuario");

        //Perfil
        create(new Permissao("perfil", "Perfil", true), "controleAcesso");
        create(new Permissao("perfil.create", "Cadastro de Perfil", "/admin/view/controleAcesso/perfil/createPerfil.jsf", true), "perfil");
        create(new Permissao("perfil.list", "Consulta de Perfil", "/admin/view/controleAcesso/perfil/listPerfil.jsf", true), "perfil");
        create(new Permissao("perfil.audit", "Auditoria de Perfil"), "perfil");
        create(new Permissao("perfil.delete", "Exclusão de Perfil"), "perfil");

        //Acessos do Sistema
        create(new Permissao("acessoSistema.list", "Relatório de Acessos", "/admin/view/controleAcesso/acessoSistema/listAcessoSistema.jsf", true), "controleAcesso");

        //Solicitacao recuperacao senha
        create(new Permissao("solicitacaoRecuperacaoSenha", "Recuperação de Senha", true), "controleAcesso");
        create(new Permissao("solicitacaoRecuperacaoSenha.list", "Consulta Recuperação de Senha", "/admin/view/controleAcesso/solicitacaoRecuperacaoSenha/listSolicitacaoRecuperacaoSenha.jsf", true), "solicitacaoRecuperacaoSenha");
        create(new Permissao("solicitacaoRecuperacaoSenha.audit", "Auditoria de Recuperação de Senha"), "solicitacaoRecuperacaoSenha");


        /*
         * Email
         */
        create(new Permissao("email", "Email", true), "administracaoSistema");

        //Modelo email
        create(new Permissao("modeloEmail", "Modelo de Email", true), "email");
        create(new Permissao("modeloEmail.create", "Cadastro de Modelo de Email", "/admin/view/email/modeloEmail/createModeloEmail.jsf", true), "modeloEmail");
        create(new Permissao("modeloEmail.list", "Consulta de Modelo de Email", "/admin/view/email/modeloEmail/listModeloEmail.jsf", true), "modeloEmail");
        create(new Permissao("modeloEmail.audit", "Auditoria de Modelo de Email"), "modeloEmail");
        create(new Permissao("modeloEmail.delete", "Exclusão de Modelo de Email"), "modeloEmail");

        //Configuracao email
        create(new Permissao("configuracaoEmail", "Configuração de Email", true), "email");
        create(new Permissao("configuracaoEmail.create", "Cadastro de Configuração de Email", "/admin/view/email/configuracaoEmail/createConfiguracaoEmail.jsf", true), "configuracaoEmail");
        create(new Permissao("configuracaoEmail.list", "Consulta de Configuração de Email", "/admin/view/email/configuracaoEmail/listConfiguracaoEmail.jsf", true), "configuracaoEmail");
        create(new Permissao("configuracaoEmail.audit", "Auditoria de Configuração de Email"), "configuracaoEmail");
        create(new Permissao("configuracaoEmail.delete", "Exclusão de Configuração de Email"), "configuracaoEmail");

        /*
         * Configuracao
         */
        create(new Permissao("configuracaoSistema", "Configuração", true), "administracaoSistema");

        //Erro sistema
        create(new Permissao("erroSistema.list", "Relatório de Erros", "/admin/view/configuracao/erroSistema/listErroSistema.jsf", true), "configuracaoSistema");

        /**
         * Permissoes Globais
         */
        //Alterar Senha
        createGlobal(new Permissao("usuario.alterarSenha", "Alterar Senha", "/admin/view/controleAcesso/password/alterPassword.jsf", true), "controleAcesso");
        createGlobal(new Permissao("usuario.ultimosAcessos", "Últimos Acessos", "/admin/view/controleAcesso/acessoSistema/ultimosAcessoSistema.jsf", true), "controleAcesso");

    }

    private void createGlobal(Permissao permissao, String pai) {
        permissao.setGlobal(true);
        create(permissao, pai);
    }

    private void create(Permissao permissao, String pai) {

        if (pai != null && pai.equals(permissao.getKey())) {
            logger.log(Level.WARNING, "Permissao ''{0}'' pai dela mesmo. Esta permissao nao sera salva.", permissao.getKey());
            return;
        }

        Permissao permissaoDB = permissaoDAO.unique("key", permissao.getKey());

        if (pai != null && !pai.isEmpty()) {
            Permissao permissaoPai = permissaoDAO.unique("key", pai);
            permissao.setPermissaoPai(permissaoPai);
        }

        if (permissaoDB != null) {
            permissaoDB.setUrl(permissao.getUrl());
            permissaoDB.setDescricao(permissao.getDescricao());
            permissaoDB.setPermissaoPai(permissao.getPermissaoPai());
            permissaoDB.setPossuiMenu(permissao.isPossuiMenu());
            permissaoDB.setGlobal(permissao.isGlobal());
            permissao = permissaoDB;
        }

        permissaoDAO.merge(permissao, false);
    }
}
